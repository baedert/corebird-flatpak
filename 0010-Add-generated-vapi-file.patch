From 6d94be4e32809a5bef9d95f87c6bbf4942978650 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Timm=20B=C3=A4der?= <mail@baedert.org>
Date: Mon, 10 Apr 2017 14:32:24 +0200
Subject: [PATCH 10/10] Add generated vapi file

---
 configure.ac         |   4 --
 gspell/Makefile.am   |  25 +----------
 gspell/gspell-1.deps |   1 +
 gspell/gspell-1.vapi | 114 +++++++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 117 insertions(+), 27 deletions(-)
 create mode 100644 gspell/gspell-1.deps
 create mode 100644 gspell/gspell-1.vapi

diff --git a/configure.ac b/configure.ac
index ba7d148..6525ff4 100644
--- a/configure.ac
+++ b/configure.ac
@@ -142,10 +142,6 @@ AM_CONDITIONAL(INSTALLED_TESTS, test "x$enable_installed_tests" = "xyes")
 AX_REQUIRE_DEFINED([GOBJECT_INTROSPECTION_CHECK])
 GOBJECT_INTROSPECTION_CHECK([1.42.0])
 
-# Vala
-AX_REQUIRE_DEFINED([VAPIGEN_CHECK])
-VAPIGEN_CHECK
-
 # Code coverage for unit tests
 AX_REQUIRE_DEFINED([AX_CODE_COVERAGE])
 AX_CODE_COVERAGE()
diff --git a/gspell/Makefile.am b/gspell/Makefile.am
index 98b3d11..decfdb1 100644
--- a/gspell/Makefile.am
+++ b/gspell/Makefile.am
@@ -182,30 +182,9 @@ CLEANFILES +=		\
 
 endif # HAVE_INTROSPECTION
 
-if ENABLE_VAPIGEN
--include $(VAPIGEN_MAKEFILE)
-
-gspell-@GSPELL_API_VERSION@.vapi: Gspell-@GSPELL_API_VERSION@.gir
-
-VAPIGEN_VAPIS = gspell-@GSPELL_API_VERSION@.vapi
-
-gspell_@GSPELL_API_VERSION@_vapi_DEPS = gtk+-3.0
-
-gspell-@GSPELL_API_VERSION@.deps:
-	$(AM_V_GEN) for pkg in $(gspell_@GSPELL_API_VERSION@_vapi_DEPS); do \
-		echo $$pkg >> $@; \
-	done
-
-gspell_@GSPELL_API_VERSION@_vapi_METADATADIRS = $(srcdir)
-gspell_@GSPELL_API_VERSION@_vapi_FILES = Gspell-@GSPELL_API_VERSION@.gir
-
 vapidir = $(datadir)/vala/vapi
 vapi_DATA =					\
-	gspell-@GSPELL_API_VERSION@.vapi	\
-	gspell-@GSPELL_API_VERSION@.deps
-
-CLEANFILES += $(vapi_DATA)
-
-endif # ENABLE_VAPIGEN
+	gspell-1.vapi	\
+	gspell-1.deps
 
 -include $(top_srcdir)/git.mk
diff --git a/gspell/gspell-1.deps b/gspell/gspell-1.deps
new file mode 100644
index 0000000..f713e68
--- /dev/null
+++ b/gspell/gspell-1.deps
@@ -0,0 +1 @@
+gtk+-3.0
diff --git a/gspell/gspell-1.vapi b/gspell/gspell-1.vapi
new file mode 100644
index 0000000..abbf4fa
--- /dev/null
+++ b/gspell/gspell-1.vapi
@@ -0,0 +1,114 @@
+/* gspell-1.vapi generated by vapigen-0.34, do not modify. */
+
+[CCode (cprefix = "Gspell", gir_namespace = "Gspell", gir_version = "1", lower_case_cprefix = "gspell_")]
+namespace Gspell {
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_checker_get_type ()")]
+	public class Checker : GLib.Object {
+		[CCode (has_construct_function = false)]
+		public Checker (Gspell.Language? language);
+		public void add_word_to_personal (string word, ssize_t word_length);
+		public void add_word_to_session (string word, ssize_t word_length);
+		public bool check_word (string word, ssize_t word_length) throws GLib.Error;
+		public void clear_session ();
+		public unowned Gspell.Language? get_language ();
+		public GLib.SList<string> get_suggestions (string word, ssize_t word_length);
+		public void set_correction (string word, ssize_t word_length, string replacement, ssize_t replacement_length);
+		public void set_language (Gspell.Language? language);
+		public Gspell.Language language { get; set construct; }
+		public virtual signal void session_cleared ();
+		public virtual signal void word_added_to_personal (string word);
+		public virtual signal void word_added_to_session (string word);
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_checker_dialog_get_type ()")]
+	public class CheckerDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
+		[CCode (has_construct_function = false, type = "GtkWidget*")]
+		public CheckerDialog (Gtk.Window parent, Gspell.Navigator navigator);
+		public unowned Gspell.Navigator get_spell_navigator ();
+		public Gspell.Navigator spell_navigator { get; construct; }
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gspell_language_get_type ()")]
+	[Compact]
+	public class Language {
+		public int compare (Gspell.Language language_b);
+		public Gspell.Language copy ();
+		public void free ();
+		public static unowned GLib.List<Gspell.Language> get_available ();
+		public unowned string get_code ();
+		public static unowned Gspell.Language? get_default ();
+		public unowned string get_name ();
+		public static unowned Gspell.Language? lookup (string language_code);
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_language_chooser_button_get_type ()")]
+	public class LanguageChooserButton : Gtk.Button, Atk.Implementor, Gspell.LanguageChooser, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
+		[CCode (has_construct_function = false, type = "GtkWidget*")]
+		public LanguageChooserButton (Gspell.Language? current_language);
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_language_chooser_dialog_get_type ()")]
+	public class LanguageChooserDialog : Gtk.Dialog, Atk.Implementor, Gspell.LanguageChooser, Gtk.Buildable {
+		[CCode (has_construct_function = false, type = "GtkWidget*")]
+		public LanguageChooserDialog (Gtk.Window parent, Gspell.Language? current_language, Gtk.DialogFlags flags);
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_navigator_text_view_get_type ()")]
+	public class NavigatorTextView : GLib.InitiallyUnowned, Gspell.Navigator {
+		[CCode (has_construct_function = false)]
+		protected NavigatorTextView ();
+		public unowned Gtk.TextView get_view ();
+		public static unowned Gspell.Navigator @new (Gtk.TextView view);
+		public Gtk.TextView view { get; construct; }
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_text_buffer_get_type ()")]
+	public class TextBuffer : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected TextBuffer ();
+		public unowned Gtk.TextBuffer get_buffer ();
+		public static unowned Gspell.TextBuffer get_from_gtk_text_buffer (Gtk.TextBuffer gtk_buffer);
+		public unowned Gspell.Checker? get_spell_checker ();
+		public void set_spell_checker (Gspell.Checker? spell_checker);
+		public Gtk.TextBuffer buffer { get; construct; }
+		public Gspell.Checker spell_checker { get; set; }
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_text_view_get_type ()")]
+	public class TextView : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected TextView ();
+		[Version (since = "1.2")]
+		public void basic_setup ();
+		[Version (since = "1.2")]
+		public bool get_enable_language_menu ();
+		public static unowned Gspell.TextView get_from_gtk_text_view (Gtk.TextView gtk_view);
+		public bool get_inline_spell_checking ();
+		public unowned Gtk.TextView get_view ();
+		[Version (since = "1.2")]
+		public void set_enable_language_menu (bool enable_language_menu);
+		public void set_inline_spell_checking (bool enable);
+		[Version (since = "1.2")]
+		public bool enable_language_menu { get; set; }
+		public bool inline_spell_checking { get; set; }
+		public Gtk.TextView view { get; construct; }
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_cname = "GspellLanguageChooserInterface", type_id = "gspell_language_chooser_get_type ()")]
+	public interface LanguageChooser : GLib.Object {
+		public unowned Gspell.Language? get_language ();
+		public unowned string get_language_code ();
+		[NoWrapper]
+		public abstract unowned Gspell.Language get_language_full (bool default_language);
+		public abstract void set_language (Gspell.Language? language);
+		public void set_language_code (string? language_code);
+		[ConcreteAccessor]
+		public abstract Gspell.Language language { get; set; }
+		[ConcreteAccessor]
+		public abstract string language_code { get; set; }
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", type_cname = "GspellNavigatorInterface", type_id = "gspell_navigator_get_type ()")]
+	public interface Navigator : GLib.InitiallyUnowned {
+		public abstract void change (string word, string change_to);
+		public abstract void change_all (string word, string change_to);
+		public abstract bool goto_next (out string word, out Gspell.Checker spell_checker) throws GLib.Error;
+	}
+	[CCode (cheader_filename = "gspell/gspell.h", cprefix = "GSPELL_CHECKER_ERROR_")]
+	public errordomain CheckerError {
+		DICTIONARY,
+		NO_LANGUAGE_SET;
+		public static GLib.Quark quark ();
+	}
+}
-- 
2.12.2

